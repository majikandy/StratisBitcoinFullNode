@using System.Net.Http
@using System.Text.RegularExpressions
@using System.Linq;
@using Newtonsoft.Json.Linq

@page "/ContractInfo"
@inject HttpClient HttpClient

<h1>Contract Information</h1>

<p>Explore any contract</p>


Contract address: <input type="text" bind="@contractAddress" />
<input type="submit" onclick="@GetAllContractInfo" value="Get info" disabled="@gettingInfo" />
<br /><br />

@if (gettingInfo)
{
    <div>Collecting storage values...</div>
}

@if (error != null)
{
    <div>@error</div>
}

@*@if (publicMethods != null)
{
    <div class="table-responsive-md">
        <table class="table table-striped">
            <thead>
            <tr>
                <th>Public methods</th>
            </tr>
            </thead>
            <tbody>
                @for(int i = 1; i < publicMethods.Count; i++)
                {
                    <tr>
                        <td>@publicMethods[i]</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}*@

@if (storageStrings != null && storageStrings.Count != 0)
{
    <div class="table-responsive-md">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Storage key</th>
                    <th>value</th>
                </tr>
            </thead>
            <tbody>

                @for (int i = 0; i < storageStrings.Count; i++)
                {
                    string key = storageStrings.Keys.ElementAt(i);
                    string value = storageStrings.Values.ElementAt(i);

                    <tr>
                        <td>
                            @key
                            @if (value.StartsWith("["))
                            {
                                <br /><span class="badge badge-pill badge-dark">List</span>
                            }
                        </td>
                        <td>
                            @if (value.StartsWith("["))
                            {
                                var list = value.Trim('[').Trim(']').Split(',');

                                for (int j = 0; j < list.Length; j++)
                                {
                                    @list[j] <br />
                                }
                            }
                            else
                            {
                                @value
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@functions {
    string contractAddress = "mtLrJ42YSW3DEXV1oaaRB5VEg2ULg4rN7N";

    string contractName;

    string codeJson;
    string csharp;

    bool gettingInfo = false;

    Dictionary<string, string> storageStrings;
    private string error = "";

    List<string> publicMethods;

    protected override async Task OnInitAsync()
    {
    }

    private async Task GetAllContractInfo()
    {
        gettingInfo = true;
        error = "";
        try
        {
            storageStrings = new Dictionary<string, string>();
            publicMethods = null;

            codeJson = await HttpClient.GetStringAsync("http://localhost:38220/api/SmartContracts/code?address=" +
                                                   contractAddress);

            var code = JObject.Parse(codeJson);

            csharp = code["csharp"].Value<string>();
            await GetPublicMethods();


            await GetStorageValues(csharp, "GetString", "String", storageStrings);
            await GetStorageValues(csharp, "GetAddress", "Address", storageStrings);
            await GetStorageValues(csharp, "GetInt64", "Long", storageStrings);
            await GetStorageValues(csharp, "GetUInt64", "Ulong", storageStrings);
            await GetStorageValues(csharp, "GetInt32", "Int", storageStrings);
            await GetStorageValues(csharp, "GetUInt32", "Uint", storageStrings);


            await GetStorageListValues(csharp, "GetStringList", "String", storageStrings);
            await GetStorageListValues(csharp, "GetAddressList", "Address", storageStrings);

        }
        catch (Exception e)
        {
            error = e.Message;
        }
        finally
        {
            gettingInfo = false;
        }
    }

    private Task GetPublicMethods()
    {
        var publicMethodsRegex = $@"public ([^)]*)";
        var matches = Regex.Matches(csharp, publicMethodsRegex);

        publicMethods = new List<string>();

        foreach (Match match in matches)
        {
            string matchValue = match.Groups[1].Value;
            if (!matchValue.Contains("base.PersistentState"))
            {
                var parameters = matchValue.Split(',');
                string methodNameAndFirstParam = parameters[0];
                int indexOfSpace = methodNameAndFirstParam.IndexOf(" ");
                var returnType = methodNameAndFirstParam.Substring(0, indexOfSpace);
                int indexOfOpenParenthesis = methodNameAndFirstParam.IndexOf("(");
                int lengthOfMethodName = (indexOfOpenParenthesis - indexOfSpace) - 1;
                //var methodName = methodNameAndFirstParam.Substring(indexOfSpace+1, lengthOfMethodName);
                //var methodName = methodNameAndFirstParam + " " + indexOfSpace + " " + lengthOfMethodName;
                var methodName = methodNameAndFirstParam;

                //var returnTypeAndMethodName = parameters[0].Substring(0, indexOfOpenParenthesis-1);
                //parameters[0] = parameters[0].Substring(indexOfOpenParenthesis+1); //set the first param without method name

                string tempParamsDebug = " {";

                for (int i = 1; i < parameters.Length; i++)
                {
                    int indexOfParamSpace = parameters[i].IndexOf(" ");
                    var paramType = parameters[i].Substring(0, indexOfParamSpace);
                    var paramName = parameters[i].Substring(indexOfParamSpace + 1);
                    tempParamsDebug += " t:" + paramType + " n:" + paramName + " | ";
                }
                tempParamsDebug += "} " + returnType + " ..... " +  methodName;

                //publicMethods.Add(matchValue + indexOfSpace + " returnType: " + returnType + " methodname: " + methodName + " params: " + tempParamsDebug);
                publicMethods.Add(tempParamsDebug);

            }
        }
        return Task.CompletedTask;
    }

    private async Task GetStorageValues(string csharp, string perisistentStateMethodName, string dataType, IDictionary<string, string> storageDictionary)
    {
        var stringRegex = $@"base.PersistentState.{perisistentStateMethodName}\(""([^""]*)";
        var matches = Regex.Matches(csharp, stringRegex);

        foreach (Match match in matches)
        {
            string storageKey = match.Groups[1].Value;
            try
            {
                var value = await HttpClient.GetStringAsync(
                    $"http://localhost:38220/api/SmartContracts/storage?ContractAddress={contractAddress}&StorageKey={storageKey}&DataType={dataType}");
                storageDictionary.Add(storageKey, value);
            }
            catch
            {
                storageDictionary.Add(storageKey, "null");
            }
        }
    }

    private async Task GetStorageListValues(string csharp, string perisistentStateMethodName, string dataType, IDictionary<string, string> storageDictionary)
    {
        var stringRegex = $@"base.PersistentState.{perisistentStateMethodName}\(""([^""]*)";
        var matches = Regex.Matches(csharp, stringRegex);

        foreach (Match match in matches)
        {
            string storageKey = match.Groups[1].Value;
            string listValue = "";
            try
            {
                bool found = true;

                int i = 0;
                while (true)
                {
                    var value = await HttpClient.GetStringAsync($"http://localhost:38220/api/SmartContracts/storage?ContractAddress={contractAddress}&StorageKey={storageKey}[{i}]&DataType={dataType}");
                    if (string.IsNullOrWhiteSpace(value) || value == "null" || i == 1000)
                    {
                        throw new Exception();
                    }
                    listValue += "," + value;
                    i++;
                }

            }
            catch
            {
                storageDictionary.Add(storageKey, "[ " + listValue.Trim(',') + " ]");
            }
        }
    }



}
