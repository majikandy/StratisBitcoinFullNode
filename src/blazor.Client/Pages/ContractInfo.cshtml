@using System.Net
@using System.Net.Http
@using System.Reflection
@using System.Runtime.Serialization.Json
@using System.Text
@using System.Text.RegularExpressions
@using blazor.Client.Pages
@using blazor.Client.ViewModels
@using Microsoft.AspNetCore.Blazor.Browser.Http
@using Microsoft.AspNetCore.Blazor.Browser.Services
@using Newtonsoft.Json
@using System.Linq;
@using Newtonsoft.Json.Linq

@page "/ContractInfo"
@inject HttpClient HttpClient

<h1>Contract Information</h1>

<p>Explore any contract</p>


Contract address: <input type="text" bind="@contractAddress" />
<input type="submit" onclick="@GetAllContractInfo" value="Get info" disabled="@gettingInfo" />
<br /><br />

@if (gettingInfo)
{
    <div>Collecting storage values...</div>
}
@if (storageStrings != null && storageStrings.Count != 0)
{
    <div class="table-responsive-md">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Storage key</th>
                    <th>value</th>
                </tr>
            </thead>
            <tbody>

                @for (int i = 0; i < storageStrings.Count; i++)
                {
                    <tr>
                        <td>@storageStrings.Keys.ElementAt(i)</td>
                        <td>
                            @if (storageStrings.Values.ElementAt(i).StartsWith("["))
                            {
                                var list = storageStrings.Values.ElementAt(i).Trim('[').Trim(']').Split(',');

                                for (int j = 0; j < list.Length; j++)
                                {
                                    @list[j]<br />
                                }
                            }
                            else
                            {
                                @storageStrings.Values.ElementAt(i)

                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@functions {
string contractAddress = "mtLrJ42YSW3DEXV1oaaRB5VEg2ULg4rN7N";

string contractName;

string codeJson;
string csharp;

    bool gettingInfo = false;

Dictionary<string, string> storageStrings;


protected override async Task OnInitAsync()
{
}

private async Task GetAllContractInfo()
{
    gettingInfo = true;
    try
    {
        storageStrings = new Dictionary<string, string>();
        codeJson = await HttpClient.GetStringAsync("http://localhost:38220/api/SmartContracts/code?address=" +
                                                   contractAddress);

        var code = JObject.Parse(codeJson);

        csharp = code["csharp"].Value<string>();

        await GetStorageValues(csharp, "GetString", "String", storageStrings);
        await GetStorageValues(csharp, "GetAddress", "Address", storageStrings);
        await GetStorageValues(csharp, "GetInt64", "Long", storageStrings);
        await GetStorageValues(csharp, "GetUInt64", "Ulong", storageStrings);
        await GetStorageValues(csharp, "GetInt32", "Int", storageStrings);
        await GetStorageValues(csharp, "GetUInt32", "Uint", storageStrings);


        await GetStorageListValues(csharp, "GetStringList", "String", storageStrings);
        await GetStorageListValues(csharp, "GetAddressList", "Address", storageStrings);
    }
    finally
    {
        gettingInfo = false;
    }
}

private async Task GetStorageValues(string csharp, string perisistentStateMethodName, string dataType, IDictionary<string, string> storageDictionary)
{
    var stringRegex = $@"base.PersistentState.{perisistentStateMethodName}\(""([^""]*)";
    var matches = Regex.Matches(csharp, stringRegex);

    foreach (Match match in matches)
    {
        string storageKey = match.Groups[1].Value;
        try
        {
            var value = await HttpClient.GetStringAsync(
                $"http://localhost:38220/api/SmartContracts/storage?ContractAddress={contractAddress}&StorageKey={storageKey}&DataType={dataType}");
            storageDictionary.Add(storageKey, value);
        }
        catch
        {
            storageDictionary.Add(storageKey, "null");
        }
    }
}

private async Task GetStorageListValues(string csharp, string perisistentStateMethodName, string dataType, IDictionary<string, string> storageDictionary)
{
    var stringRegex = $@"base.PersistentState.{perisistentStateMethodName}\(""([^""]*)";
    var matches = Regex.Matches(csharp, stringRegex);

    foreach (Match match in matches)
    {
        string storageKey = match.Groups[1].Value;
        string listValue = "";
        try
        {
            bool found = true;

            int i = 0;
            while (true)
            {
                var value = await HttpClient.GetStringAsync($"http://localhost:38220/api/SmartContracts/storage?ContractAddress={contractAddress}&StorageKey={storageKey}[{i}]&DataType={dataType}");
                if (string.IsNullOrWhiteSpace(value) || value == "null" || i == 1000)
                {
                    throw new Exception();
                }
                listValue += "," + value;
                i++;
            }

        }
        catch
        {
            storageDictionary.Add(storageKey, "[ " + listValue.Trim(',') + " ]");
        }
    }
}



}
